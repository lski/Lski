using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Lski.Toolbox.Objects.Extensions;

namespace Lski.Toolbox.Txt {
	
	public class RandomString {

		/// <summary>
		/// States the types of characters that will be included in the Random String generated by CreateRandomString
		/// </summary>
		/// <remarks></remarks>
		[Flags()]
		public enum RandomStringOptions {

			/// <summary>
			/// Include uppercase letters
			/// </summary>
			/// <remarks></remarks>
			UppercaseLetters = 1,
			/// <summary>
			/// Include lowercase letters
			/// </summary>
			/// <remarks></remarks>
			LowercaseLetters = 2,
			/// <summary>
			/// Include numbers 0-9
			/// </summary>
			/// <remarks></remarks>
			Numbers = 4,
			/// <summary>
			/// Include underscores (best used in combination with other options)
			/// </summary>
			/// <remarks></remarks>
			Underscores = 8,
			/// <summary>
			/// Include hyphens (best used in combination with other options)
			/// </summary>
			/// <remarks></remarks>
			Hyphens = 16,
			/// <summary>
			/// Include both lower and upper case letters
			/// </summary>
			/// <remarks></remarks>
			Letters = (UppercaseLetters | LowercaseLetters),
			/// <summary>
			/// Include all upper and lower case letters and numbers
			/// </summary>
			/// <remarks></remarks>
			AlphaNumerics = (Letters | Numbers),
			/// <summary>
			/// Include all options
			/// </summary>
			/// <remarks></remarks>
			All = (AlphaNumerics | Underscores | Hyphens)

		}

		/// <summary>
		/// Used to prevent the milliseconds being the same through twice because the clock is too fast for the processor
		/// </summary>
		private Int32 _seedCounter = 0;

		/// <summary>
		/// Creates a random ascii string using the options passed. Also offers the ability to exclude certain characters 
		/// </summary>
		/// <param name="numOfChars">The amount of characters in the string</param>
		/// <param name="charsToExclude">Any specific characters that are not wanted in the results (Character Codes)</param>
		/// <returns></returns>
		/// <remarks></remarks>
		public string Create(RandomStringOptions options = RandomStringOptions.All, Int32 numOfChars = 10, char[] chararactersToExclude = null) {

			StringBuilder code = new StringBuilder(numOfChars);
			Random rand = new Random((int)(DateTime.Now.Ticks % (Int32.MaxValue + _seedCounter++)));

			byte i = 0;
			var charList = new List<byte>();

			byte[] charsToExclude;

			if (chararactersToExclude == null)
				charsToExclude = new byte[] { };
			else
				charsToExclude = Encoding.ASCII.GetBytes(chararactersToExclude);

			// Create a list of all the ascii characters that are allowed, at first ignoring the chars to exclude

			if (options.Has(RandomStringOptions.Numbers)) {

				for (i = 48; i <= 57; i++) {
					charList.Add(i);
				}
			}

			if (options.Has(RandomStringOptions.UppercaseLetters)) {

				for (i = 65; i <= 90; i++) {
					charList.Add(i);
				}
			}

			if (options.Has(RandomStringOptions.LowercaseLetters)) {

				for (i = 97; i <= 122; i++) {
					charList.Add(i);
				}
			}


			if (options.Has(RandomStringOptions.Underscores)) {

				if (!charsToExclude.Contains((byte)95))
					charList.Add(95);
			}


			if (options.Has(RandomStringOptions.Hyphens)) {

				if (!charsToExclude.Contains((byte)45))
					charList.Add(45);
			}

			// Now exclude any characters that the user wants to exclude
			foreach (var item in charsToExclude) {
				charList.Remove(item);
			}

			// Cache the count, to avoid recalling it
			var charListCount = charList.Count;

			// Now run through and create the string
			for (Int32 x = 0; x <= numOfChars; x++) {
				code.Append(System.Convert.ToChar(charList[rand.Next(charListCount)]));
			}

			// If the _seedcounter is above its maxAmount then reset to zero
			_seedCounter = (_seedCounter > 10000 ? 0 : _seedCounter + 3);

			return code.ToString();

		}
	}
}
