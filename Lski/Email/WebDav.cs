using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Runtime.Serialization;
using System.Net;
using System.Net.Mail;
using System.IO;

namespace Lski.Email {
	
	public class WebDav : GenericEmail {

		public WebDav() : base() {
			this.AuthType = AuthenticationType.NTLM;
			this.Domain = String.Empty;
			this.Mailbox = String.Empty;
		}

		public String Domain { get;	set; }
		public string Mailbox { get; set; }
		public AuthenticationType AuthType { get; set; }

		public override void Send(string from, IEnumerable<string> to, string subject, string body, bool isHtml = false, IEnumerable<string> cc = null, IEnumerable<string> bcc = null) {

			try {

				string mailboxURI = string.Empty;
				string subURI = string.Empty;
				string tempURI = string.Empty;
				String toParsed = (to == null ? String.Empty : String.Join("; ", to.ToArray()));
				String ccParsed = (cc == null ? String.Empty : String.Join("; ", cc.ToArray()));
				String bccParsed = (bcc == null ? String.Empty : String.Join("; ", bcc.ToArray()));

				byte[] bodyBytes;
				Stream putRequestStream;

				var myCredentialCache = new CredentialCache();
				HttpWebRequest putRequest;
				HttpWebResponse putResponse;
				HttpWebRequest moveRequest;
				HttpWebResponse moveResponse;
				

				// Build the mailbox URI.
				mailboxURI = string.Format("http://{0}/exchange/{1}", this.Server, this.Mailbox);

				// Build the submission URI for the message.  If Secure Sockets Layer (SSL) is set up on the server, use "https://" instead of "http://".
				subURI = string.Format("http://{0}/exchange/{1}/##DavMailSubmissionURI##/", this.Server, this.Mailbox);

				// Build the temporary URI for the message. If SSL is set up on the server, use "https://" instead of "http://".
				tempURI = string.Format("http://{0}/exchange/{1}/drafts/{2}.eml", this.Server, this.Mailbox, subject);

				// Construct the RFC 822 formatted body of the PUT request. Note: If the From: header is included here, the MOVE method request will return a
				// 403 (Forbidden) status. The From address will be generated by the Exchange server
				body = string.Format("To: {1}{0}CC: {2}{0}Subject: {3}{0}Reply-To:{6}{0}Date: {4}X-Mailer: Bookwise{0}MIME-Version: 1.0{0}Content-Type: text/plain{0}Charset = iso-8859-1{0}Content-Transfer-Encoding: 7bit{0}{0}{5}",
										Environment.NewLine,
										toParsed,
										ccParsed,
										subject,
										System.DateTime.Now,
										body,
										from);

				// Create a new CredentialCache object and fill it with the network credentials required to access the server. and add it to the request
				myCredentialCache.Add(new Uri(mailboxURI), this.AuthType.ToString(), new NetworkCredential(this.Username, this.Password, this.Domain));

				// Create the PUT HttpWebRequest object.
				putRequest = (HttpWebRequest)WebRequest.Create(tempURI);

				// Add the network credentials to the request.
				putRequest.Credentials = myCredentialCache;

				// Specify the PUT method.
				putRequest.Method = "PUT";

				// Encode the body using UTF-8.
				bodyBytes = System.Text.Encoding.UTF8.GetBytes(body);

				// Set the content header length.  This must be done before writing data to the request stream.
				putRequest.ContentLength = bodyBytes.Length;

				// Get a reference to the request stream.
				putRequestStream = putRequest.GetRequestStream();

				// Write the message body to the request stream.
				putRequestStream.Write(bodyBytes, 0, bodyBytes.Length);

				// Close the Stream object to release the connection for further use.
				putRequestStream.Close();

				// Set the Content-Type header to the RFC 822 message format.
				putRequest.ContentType = "message/rfc822";

				if (this.Timeout != 0)
					putRequest.Timeout = this.Timeout;

				// PUT the message in the Drafts folder of the sender's mailbox.
				putResponse = (HttpWebResponse)putRequest.GetResponse();

				// Create the MOVE HttpWebRequest object.
				moveRequest = (HttpWebRequest)WebRequest.Create(tempURI);

				// Add the network credentials to the request.
				moveRequest.Credentials = myCredentialCache;

				// Specify the MOVE method.
				moveRequest.Method = "MOVE";

				// Set the Destination header to the mail submission URI.
				moveRequest.Headers.Add("Destination", subURI);

				if (this.Timeout != 0)
					moveRequest.Timeout = this.Timeout;

				// Send the message by moving it from the Drafts folder of the sender's mailbox to the mail submission URI.
				moveResponse = (HttpWebResponse)moveRequest.GetResponse();

				// Clean up.
				putResponse.Close();
				moveResponse.Close();

			} catch (Exception ex) {

				throw new Exception("There was an error sending an email using WebDav", ex);
			}

		}
	}
}
