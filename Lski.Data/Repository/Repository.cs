//using System;
//using System.Collections.Generic;
//using System.Linq;
//using System.Text;
//using System.Data.Common;
//using System.Configuration;

//namespace Toolbox.ADO.Repository {

//    /// <summary>
//    /// Class that holds 
//    /// </summary>
//    public class Repository : IDisposable {

//        public Repository(String connectionStringName) {

//            var cs = ConfigurationManager.ConnectionStrings[connectionStringName];

//            if (cs == null)
//                throw new ArgumentException("The connection string '" + connectionStringName + "' does not exist");

//            this.Init(cs.ConnectionString, cs.ProviderName);
//        }

//        public Repository(String connectionString, String providerName) {
//            this.Init(connectionString, providerName);
//        }

//        internal Repository(String connectionString, DbProviderFactory factory) {
//            this.Init(connectionString, factory);
//        }

//        protected virtual void Init(String connectionString, String providerName) {

//            this.Init(connectionString, this.GetFactory(providerName));
//        }

//        protected virtual void Init(String connectionString, DbProviderFactory factory) {

//            this.ConnectionString = connectionString;
//            this.Provider = factory;
//        }

//        private String _connectionString;
//        private DbProviderFactory _provider;
//        private DbConnection _connection;
//        private Int16 _connectionLevel = 0;
//        private DbTransaction _transaction;
//        private Int16 _transactionLevel = 0;
//        private Boolean _transactionCancelled = false;

//        /// <summary>
//        /// The connection string used to connect to the appropriate database
//        /// </summary>
//        public String ConnectionString {
//            get { return _connectionString; }
//            set { _connectionString = value; }
//        }

//        /// <summary>
//        /// The provider used to connect to the database
//        /// </summary>
//        public DbProviderFactory Provider {
//            get { return _provider; }
//            set { _provider = value; }
//        }

//        public DbConnection Connection {
//            get { return _connection; }
//        }

//        /// <summary>
//        /// Simply returns the factory object for this repository
//        /// </summary>
//        /// <param name="providerName"></param>
//        /// <returns></returns>
//        protected virtual DbProviderFactory GetFactory(String providerName) {
//            return DbProviderFactories.GetFactory(providerName);
//        }

//        // Set to true to keep the first opened connection alive until this object is disposed
//        public bool KeepConnectionAlive { get; set; }

//        // Open a connection (can be nested)
//        protected void OpenSharedConnection() {
//            if (_connectionLevel == 0) {
//                _connection = _provider.CreateConnection();
//                _connection.ConnectionString = _connectionString;
//                _connection.Open();

//                _connection = OnConnectionOpened(_connection);

//                if (KeepConnectionAlive)
//                    _connectionLevel++;		// Make sure you call Dispose
//            }
//            _connectionLevel++;
//        }

//        // Close a previously opened connection
//        protected void CloseSharedConnection() {
//            if (_connectionLevel > 0) {
//                _connectionLevel--;
//                if (_connectionLevel == 0) {
//                    OnConnectionClosing(_connection);
//                    _connection.Dispose();
//                    _connection = null;
//                }
//            }
//        }

//        // Access to our shared connection
//        public DbConnection Connection {
//            get { return _connection; }
//        }

//        // Helper to create a transaction scope
//        public TransactionScope GetTransaction() {
//            return new TransactionScope(this);
//        }

//        // Use by derived repo generated by T4 templates
//        public virtual void OnBeginTransaction() { }
//        public virtual void OnEndTransaction() { }

//        // Start a new transaction, can be nested, every call must be
//        //	matched by a call to AbortTransaction or CompleteTransaction
//        // Use `using (var scope=db.Transaction) { scope.Complete(); }` to ensure correct semantics
//        protected void BeginTransaction() {
//            _transactionLevel++;

//            if (_transactionLevel == 1) {
//                OpenSharedConnection();
//                _transaction = _connection.BeginTransaction();
//                _transactionCancelled = false;
//                OnBeginTransaction();
//            }

//        }

//        // Internal helper to cleanup transaction stuff
//        void CleanupTransaction() {
//            OnEndTransaction();

//            if (_transactionCancelled)
//                _transaction.Rollback();
//            else
//                _transaction.Commit();

//            _transaction.Dispose();
//            _transaction = null;

//            CloseSharedConnection();
//        }

//        // Abort the entire outer most transaction scope
//        protected void AbortTransaction() {

//            _transactionCancelled = true;
//            if ((--_transactionLevel) == 0)
//                CleanupTransaction();
//        }

//        // Complete the transaction
//        protected void CompleteTransaction() {
//            if ((--_transactionLevel) == 0)
//                CleanupTransaction();
//        }

//        public void Dispose() {

//            Dispose(true);
//            GC.SuppressFinalize(this);
//        }

//        /// <summary>
//        /// If when the object is disposed the transaction has NOT been completed then the transaction will be rolled back, a'la TransactionScope
//        /// </summary>
//        public void Dispose(Boolean disposing) {

//            // If disposing equals true, dispose all managed and unmanaged resources.
//            if (disposing)
//                CloseSharedConnection();
//        }

//        #region TransactionClass

//        // Transaction object helps maintain transaction depth counts
//        public class TransactionScope : IDisposable {

//            Repository _db;

//            public DbTransaction Transaction {
//                get { return _db._transaction; }
//            }

//            public TransactionScope(Repository db) {
//                _db = db;
//                _db.BeginTransaction();
//            }

//            public virtual void Complete() {
//                _db.CompleteTransaction();
//                _db = null;
//            }

//            public void Abort() {
//                if (_db != null)
//                    _db.AbortTransaction();
//            }

//            public void Dispose() {
//                if (_db != null)
//                    _db.AbortTransaction();
//            }
//        }
		
//        #endregion
//    }
//}
