<#@ include file="DataObjects.ttinclude" #>
using System;
using System.Configuration;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
using System.Text;
using System.Runtime.Serialization;

using Toolbox.ADO;
using Toolbox.ADO.ORM.DataObjects;
using Toolbox.ADO.ORM.Schema;
using Toolbox.ADO.DbFactoryProvider;
using Toolbox.Logging;
using Toolbox.Txt;

<# if(!String.IsNullOrEmpty(Namespace)) { 
	WriteLine("namespace " + Namespace + " {");
	PushIndent("\t");
}
#>

<# foreach(var tab in Tables) { #>

[DataContract()]
public partial class <#= tab.ToClassName() #> : DataObject {

	#region "Methods"

	protected override TableSchema CreateSchema() {

		return <#= tab.ToClassName() #>Schema.Default;
	}

	#endregion

	#region Properties
	<# foreach(var col in tab.Columns) { #>
		
	protected <#= col.ToDataTypeString() #> <#= col.ToVariableName() #>;
	[DataMember()]
	public virtual <#= col.ToDataTypeString() #> <#= col.ToPropertyName() #> {
		get { 
			return <#= col.ToVariableName() #><#= (!col.columnType.IsValueType ? " ?? (" + col.ToVariableName() + " = \"\")" : "") #>;
		}
		set {
			if(<#= col.ToVariableName() #> != value) { // Only attempt to change if the value is different to the original
						
				this.<#= col.ToVariableName() #> = value; 
						
				// Mark this record as being modified as it has changed
				this._recordState = DataObjectState.Modified;
			}
		}
	}
	<# } #>

	#endregion
	
}

public class <#= tab.ToClassName() #>Schema : TableSchema {

	public static <#= tab.ToClassName() #>Schema Default = new <#= tab.ToClassName() #>Schema(DbProvider.GetProvider("<#= ConnectionStringName #>"), "<#= tab.TableName #>");

<# foreach(var col in tab.Columns) { 	#>
	public FieldSchema <#= col.ToPropertyName() #>;
<# } #>

	public <#= tab.ToClassName() #>Schema(DbProvider provider, string tableName) : base(provider, tableName) {
		this.Init();
	}

	protected <#= tab.ToClassName() #>Schema() : base() {
		this.Init();
	}

	public void Init() {

		// Create each of the field schemas valid for this object
<# foreach(var col in tab.Columns) { 	#>
		this.<#= col.ToPropertyName() #> = new FieldSchema(this, "<#= col.ToPropertyName() #>", "<#= col.columnName #>", DbType.<#= TypeConvertor.ToDbType(col.columnType) #>, <#= col.isReadOnly.ToString().ToLower() #>, <#= col.isNullable.ToString().ToLower() #>, <#= col.isPrimary.ToString().ToLower() #>, <#= col.isAutoincrement.ToString().ToLower() #>);
<# } #>
	
		// Add each of the fields to make referencing them via a list in code
<# foreach(var col in tab.Columns) { 	#>
		this.Fields.Add("<#= col.ToPropertyName() #>", this.<#= col.ToPropertyName() #>);
<# } #>
	
	}

}

<# } /* Ends the table for each */  #>

<# if(!String.IsNullOrEmpty(Namespace)) { 
	PopIndent();
	WriteLine("}"); 
} #>