<#@ include file="DataObjects.ttinclude" #>
using System;
using System.Configuration;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
using System.Text;
using System.Runtime.Serialization;

using Toolbox.ADO;
using Toolbox.ADO.ORM.DataObjects;
using Toolbox.ADO.ORM.Schema;
using Toolbox.ADO.DbFactoryProvider;
using Toolbox.Logging;
using Toolbox.Txt;

<# if(!String.IsNullOrEmpty(Namespace)) { 
	WriteLine("namespace " + Namespace + " {");
	PushIndent("\t");
}
#>

<# foreach(var tab in Tables) { #>

[DataContract()]
public partial class <#= tab.ToClassName() #> : DataObjectBasic {

	#region "Methods"

	protected override TableSchema CreateSchema() {

		return <#= tab.ToClassName() #>Schema.Default;
	}

	#endregion

	#region Properties
	<# foreach(var col in tab.Columns) { #>
		
	protected <#= col.ToDataTypeString() #> <#= col.ToVariableName() #>;
	[DataMember()]
	public virtual <#= col.ToDataTypeString() #> <#= col.ToPropertyName() #> {
		get { 
			return <#= col.ToVariableName() #><#= (!col.columnType.IsValueType ? " ?? (" + col.ToVariableName() + " = \"\")" : "") #>;
		}
		set {
			if(<#= col.ToVariableName() #> != value) { // Only attempt to change if the value is different to the original
						
				this.<#= col.ToVariableName() #> = value; 
						
				// Mark this record as being modified as it has changed
				this._recordState = DataObjectState.Modified;
			}
		}
	}
	<# } #>

	#endregion
}

<# } /* Ends the table for each */  #>

<# if(!String.IsNullOrEmpty(Namespace)) { 
	PopIndent();
	WriteLine("}"); 
} #>