using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Lski.Toolbox.Objects.Extensions;

namespace Lski.Toolbox.Txt {
	
	public class RandomString {

		/// <summary>
		/// States the types of characters that will be included in the Random String generated by CreateRandomString
		/// </summary>
		/// <remarks></remarks>
		[Flags()]
		public enum CharacterOptions {

			/// <summary>
			/// Include uppercase letters
			/// </summary>
			/// <remarks></remarks>
			UppercaseLetters = 1,
			/// <summary>
			/// Include lowercase letters
			/// </summary>
			/// <remarks></remarks>
			LowercaseLetters = 2,
			/// <summary>
			/// Include numbers 0-9
			/// </summary>
			/// <remarks></remarks>
			Numbers = 4,
			/// <summary>
			/// Include underscores (best used in combination with other options)
			/// </summary>
			/// <remarks></remarks>
			Underscores = 8,
			/// <summary>
			/// Include hyphens (best used in combination with other options)
			/// </summary>
			/// <remarks></remarks>
			Hyphens = 16,
			/// <summary>
			/// Include both lower and upper case letters
			/// </summary>
			/// <remarks></remarks>
			Letters = (UppercaseLetters | LowercaseLetters),
			/// <summary>
			/// Include all upper and lower case letters and numbers
			/// </summary>
			/// <remarks></remarks>
			AlphaNumerics = (Letters | Numbers),
			/// <summary>
			/// Include all options
			/// </summary>
			/// <remarks></remarks>
			All = (AlphaNumerics | Underscores | Hyphens)

		}

		/// <summary>
		/// Used to prevent the milliseconds being the same through twice because the clock is too fast for the processor
		/// </summary>
		private Int32 _seedCounter = 0;

		/// <summary>
		/// The types of characters that can be added to the string, multiple options can be selected
		/// </summary>
		public CharacterOptions Characters { get; private set; }

		/// <summary>
		/// Length of the string to be generated, can be overidden when generating the string
		/// </summary>
		public int Size { get; private set; }

		/// <summary>
		/// A list a characters that you dont want to include with the string, e.g. i, l, 0, o as they are hard to distinguish from each each
		/// </summary>
		public char[] Exclude { get; private set; }

		public RandomString() : this(CharacterOptions.All) {
		}

		public RandomString(CharacterOptions characters)
			: this(characters, 10) {
		}

		public RandomString(CharacterOptions characters, Int32 size)
			: this(characters, size, null) {
		}

		public RandomString(CharacterOptions characters, Int32 size, char[] exclude) {
			Characters = characters;
			Size = size;
			Exclude = exclude;
		}

		/// <summary>
		/// Generates a random string
		/// </summary>
		public string Generate() {
			return _Generate(Characters, Size, Exclude);
		}

		/// <summary>
		/// Generates a random string
		/// </summary>
		/// <param name="size">Overrides the size property just for this call</param>
		/// <returns></returns>
		public string Generate(Int32 size) {
			return _Generate(Characters, size, Exclude);
		}

		/// <summary>
		/// Used to generate a random string, without creating a new object.
		/// 
		/// WARNING: Do not use in a loop, create a new RandomString object outside of the loop and call its generate method in the loop. That will prevent any duplicate strings as the RandomString
		/// object uses an internal counter.
		/// </summary>
		/// <param name="characters"></param>
		/// <param name="size"></param>
		/// <param name="exclude"></param>
		/// <returns></returns>
		public static string Generate(CharacterOptions characters = CharacterOptions.All, Int32 size = 10, char[] exclude = null) {
			
			var rdm = new RandomString(characters, size, exclude);
			return rdm.Generate();
		}

		/// <summary>
		/// Creates a random ascii string using the options passed. Also offers the ability to exclude certain characters 
		/// </summary>
		/// <param name="size">The amount of characters in the string</param>
		/// <param name="charsToExclude">Any specific characters that are not wanted in the results (Character Codes)</param>
		/// <returns></returns>
		/// <remarks></remarks>
		private string _Generate(CharacterOptions characters = CharacterOptions.All, Int32 size = 10, char[] exclude = null) {

			var code = new StringBuilder(size);
			var rand = new Random((int)(DateTime.Now.Ticks % (Int32.MaxValue + _seedCounter++)));

			byte i = 0;
			var charList = new List<byte>();

			byte[] charsToExclude;

			if (exclude == null)
				charsToExclude = new byte[] { };
			else
				charsToExclude = Encoding.ASCII.GetBytes(exclude);

			// Create a list of all the ascii characters that are allowed, at first ignoring the chars to exclude

			if (characters.Has(CharacterOptions.Numbers)) {

				for (i = 48; i <= 57; i++) {
					charList.Add(i);
				}
			}

			if (characters.Has(CharacterOptions.UppercaseLetters)) {

				for (i = 65; i <= 90; i++) {
					charList.Add(i);
				}
			}

			if (characters.Has(CharacterOptions.LowercaseLetters)) {

				for (i = 97; i <= 122; i++) {
					charList.Add(i);
				}
			}


			if (characters.Has(CharacterOptions.Underscores)) {

				if (!charsToExclude.Contains((byte)95))
					charList.Add(95);
			}


			if (characters.Has(CharacterOptions.Hyphens)) {

				if (!charsToExclude.Contains((byte)45))
					charList.Add(45);
			}

			// Now exclude any characters that the user wants to exclude
			foreach (var item in charsToExclude) {
				charList.Remove(item);
			}

			// Cache the count, to avoid recalling it
			var charListCount = charList.Count;

			// Now run through and create the string
			for (var x = 0; x <= size; x++) {
				code.Append(System.Convert.ToChar(charList[rand.Next(charListCount)]));
			}

			// If the _seedcounter is above its maxAmount then reset to zero
			_seedCounter = (_seedCounter > 10000 ? 0 : _seedCounter + 3);

			return code.ToString();

		}
	}
}
